import copy as cp
import collections
import itertools

# {(0+, 0+, 0+), (0-, 0-, 0+), (0-, 0+, 0-), (0+, 0-, 0-)}
G1_test = [[[[0, 0], 0], [[0, 0], 0], [[0, 0], 0]], [[[0, 0], 1], [[0, 0], 1], [[0, 0], 0]], [[[0, 0], 1], [[0, 0], 0], [[0, 0], 1]], [[[0, 0], 0], [[0, 0], 1], [[0, 0], 1]]]

# {(0+, 0+, 0+), (1-, 1-, 0+), (1-, 0+, 1-), (0+, 1-, 1-)}
G2_test = [[[[0, 0], 0], [[0, 0], 0], [[0, 0], 0]], [[[1, 0], 1], [[1, 0], 1], [[0, 0], 0]], [[[1, 0], 1], [[0, 0], 0], [[1, 0], 1]], [[[0, 0], 0], [[1, 0], 1], [[1, 0], 1]]]

# {(0+, 0+, 0+), (t-, t-, 0+), (t-, 0+, t-), (0+, t-, t-)}
G3_test = [[[[0, 0], 0], [[0, 0], 0], [[0, 0], 0]], [[[0,1], 1], [[0,1], 1], [[0, 0], 0]], [[[0,1], 1], [[0, 0], 0], [[0,1], 1]], [[[0, 0], 0], [[0,1], 1], [[0,1], 1]]]

# {(0+, 0+, 0+), (1+, 0-, 0-), (0-, 1+, 1-), (1-, 1-, 1+),
#  (t+, t+, t+), ((t + 1)+, t-, t-), (t-, t + 1, (t + 1)-), ((t + 1)-, (t + 1)-, t+1)}
# case 1-5
G4_test = [[[[0, 0], 0], [[0, 0], 0], [[0, 0], 0]], [[[1,0], 0], [[0,0], 1], [[0, 0], 1]], [[[0,0], 1], [[1, 0], 0], [[1,0], 1]], [[[1, 0], 1], [[1,0], 1], [[1,0], 0]],
           [[[0, 1], 0], [[0, 1], 0], [[0, 1], 0]], [[[1,1], 0], [[0,1], 1], [[0, 1], 1]], [[[0,1], 1], [[1, 1], 0], [[1,1], 1]], [[[1, 1], 1], [[1,1], 1], [[1,1], 0]]]

# case 0-4
G5_test = [[[[0, 0], 0], [[0, 0], 0], [[0, 0], 0]], [[[1,0], 0], [[0,0], 1], [[0, 0], 1]], [[[0,0], 1], [[1, 0], 0], [[1,0], 1]], [[[1, 0], 1], [[1,0], 1], [[1,0], 0]]]

# case 3-5
G7_test = [[[[0, 0], 0], [[0, 0], 0], [[0, 0], 0]], [[[0, 0], 1], [[0, 0], 1], [[0, 0], 0]], [[[0, 0], 1], [[0, 0], 0], [[0, 0], 1]], [[[0, 0], 0], [[0, 0], 1], [[0, 0], 1]], 
          [[[0, 0], 0], [[1, 0], 0], [[1, 0], 0]], [[[0, 0], 1], [[1, 0], 1], [[1, 0], 0]], [[[0, 0], 1], [[1, 0], 0], [[1, 0], 1]], [[[0, 0], 0], [[1, 0], 1], [[1, 0], 1]],
          [[[1, 0], 0], [[0, 0], 0], [[1, 0], 0]], [[[1, 0], 1], [[0, 0], 1], [[1, 0], 0]], [[[1, 0], 1], [[0, 0], 0], [[1, 0], 1]], [[[1, 0], 0], [[0, 0], 1], [[1, 0], 1]],
          [[[0, 1], 0], [[0, 1], 0], [[0, 1], 0]], [[[0, 1], 1], [[0, 1], 1], [[0, 1], 0]], [[[0, 1], 1], [[0, 1], 0], [[0, 1], 1]], [[[0, 1], 0], [[0, 1], 1], [[0, 1], 1]],
          [[[0, 1], 0], [[1, 1], 0], [[1, 1], 0]], [[[0, 1], 1], [[1, 1], 1], [[1, 1], 0]], [[[0, 1], 1], [[1, 1], 0], [[1, 1], 1]], [[[0, 1], 0], [[1, 1], 1], [[1, 1], 1]],
          [[[1, 1], 0], [[0, 1], 0], [[1, 1], 0]], [[[1, 1], 1], [[0, 1], 1], [[1, 1], 0]], [[[1, 1], 1], [[0, 1], 0], [[1, 1], 1]], [[[1, 1], 0], [[0, 1], 1], [[1, 1], 1]],
          [[[1, 0], 0], [[1, 0], 0], [[0, 0], 0]], [[[1, 0], 1], [[1, 0], 1], [[0, 0], 0]], [[[1, 0], 1], [[1, 0], 0], [[0, 0], 1]], [[[1, 0], 0], [[1, 0], 1], [[0, 0], 1]],
          [[[1, 1], 0], [[1, 1], 0], [[0, 1], 0]], [[[1, 1], 1], [[1, 1], 1], [[0, 1], 0]], [[[1, 1], 1], [[1, 1], 0], [[0, 1], 1]], [[[1, 1], 0], [[1, 1], 1], [[0, 1], 1]]]           

# case 4-1
G6_test = [[[[0, 0], 0], [[0, 0], 0], [[0, 0], 0]], [[[0, 0], 1], [[0, 0], 1], [[0, 0], 0]], [[[0, 0], 1], [[0, 0], 0], [[0, 0], 1]], [[[0, 0], 0], [[0, 0], 1], [[0, 0], 1]],
           [[[0, 0], 0], [[0, 1], 0], [[1, 0], 0]], [[[0, 0], 1], [[0, 1], 1], [[1, 0], 0]], [[[0, 0], 1], [[0, 1], 0], [[1, 0], 1]], [[[0, 0], 0], [[0, 1], 1], [[1, 0], 1]],
           [[[0, 1], 0], [[1, 1], 0], [[1, 0], 0]], [[[0, 1], 1], [[1, 1], 1], [[1, 0], 0]], [[[0, 1], 1], [[1, 1], 0], [[1, 0], 1]], [[[0, 1], 0], [[1, 1], 1], [[1, 0], 1]],
           [[[1, 0], 0], [[0, 1], 0], [[1, 1], 0]], [[[1, 0], 1], [[0, 1], 1], [[1, 1], 0]], [[[1, 0], 1], [[0, 1], 0], [[1, 1], 1]], [[[1, 0], 0], [[0, 1], 1], [[1, 1], 1]],
           [[[1, 0], 0], [[1, 1], 0], [[0, 0], 0]], [[[1, 0], 1], [[1, 1], 1], [[0, 0], 0]], [[[1, 0], 1], [[1, 1], 0], [[0, 0], 1]], [[[1, 0], 0], [[1, 1], 1], [[0, 0], 1]],
           [[[1, 1], 0], [[1, 1], 0], [[1, 1], 0]], [[[1, 1], 1], [[1, 1], 1], [[1, 1], 0]], [[[1, 1], 1], [[1, 1], 0], [[1, 1], 1]], [[[1, 1], 0], [[1, 1], 1], [[1, 1], 1]],
           [[[1, 1], 0], [[0, 1], 0], [[0, 0], 0]], [[[1, 1], 1], [[0, 1], 1], [[0, 0], 0]], [[[1, 1], 1], [[0, 1], 0], [[0, 0], 1]], [[[1, 1], 0], [[0, 1], 1], [[0, 0], 1]],
           [[[0, 1], 0], [[0, 1], 0], [[0, 1], 0]], [[[0, 1], 1], [[0, 1], 1], [[0, 1], 0]], [[[0, 1], 1], [[0, 1], 0], [[0, 1], 1]], [[[0, 1], 0], [[0, 1], 1], [[0, 1], 1]],
           [[[0, 0], 0], [[1, 1], 0], [[0, 1], 0]], [[[0, 0], 1], [[1, 1], 1], [[0, 1], 0]], [[[0, 0], 1], [[1, 1], 0], [[0, 1], 1]], [[[0, 0], 0], [[1, 1], 1], [[0, 1], 1]],
           [[[0, 1], 0], [[1, 0], 0], [[0, 0], 0]], [[[0, 1], 1], [[1, 0], 1], [[0, 0], 0]], [[[0, 1], 1], [[1, 0], 0], [[0, 0], 1]], [[[0, 1], 0], [[1, 0], 1], [[0, 0], 1]],
           [[[1, 1], 0], [[1, 0], 0], [[0, 1], 0]], [[[1, 1], 1], [[1, 0], 1], [[0, 1], 0]], [[[1, 1], 1], [[1, 0], 0], [[0, 1], 1]], [[[1, 1], 0], [[1, 0], 1], [[0, 1], 1]],
           [[[1, 1], 0], [[0, 0], 0], [[1, 0], 0]], [[[1, 1], 1], [[0, 0], 1], [[1, 0], 0]], [[[1, 1], 1], [[0, 0], 0], [[1, 0], 1]], [[[1, 1], 0], [[0, 0], 1], [[1, 0], 1]],
           [[[0, 1], 0], [[0, 0], 0], [[1, 1], 0]], [[[0, 1], 1], [[0, 0], 1], [[1, 1], 0]], [[[0, 1], 1], [[0, 0], 0], [[1, 1], 1]], [[[0, 1], 0], [[0, 0], 1], [[1, 1], 1]],
           [[[1, 0], 0], [[0, 0], 0], [[0, 1], 0]], [[[1, 0], 1], [[0, 0], 1], [[0, 1], 0]], [[[1, 0], 1], [[0, 0], 0], [[0, 1], 1]], [[[1, 0], 0], [[0, 0], 1], [[0, 1], 1]],
           [[[0, 0], 0], [[1, 0], 0], [[1, 1], 0]], [[[0, 0], 1], [[1, 0], 1], [[1, 1], 0]], [[[0, 0], 1], [[1, 0], 0], [[1, 1], 1]], [[[0, 0], 0], [[1, 0], 1], [[1, 1], 1]],
           [[[1, 0], 0], [[1, 0], 0], [[1, 0], 0]], [[[1, 0], 1], [[1, 0], 1], [[1, 0], 0]], [[[1, 0], 1], [[1, 0], 0], [[1, 0], 1]], [[[1, 0], 0], [[1, 0], 1], [[1, 0], 1]]]

# case 1-1
G9_test = [[[[0, 0], 0], [[0, 0], 0], [[0, 0], 0]], [[[0,0], 0], [[0,0], 1], [[0, 0], 1]], [[[0,0], 1], [[0, 0], 0], [[0,0], 1]], [[[0, 0], 1], [[0,0], 1], [[0,0], 0]],
           [[[0, 1], 0], [[0, 1], 0], [[0, 1], 0]], [[[0,1], 0], [[0,1], 1], [[0, 1], 1]], [[[0,1], 1], [[0,1], 0], [[0,1], 1]], [[[0,1], 1], [[0,1], 1], [[0,1], 0]]]

# case 1-11
G0_test = [[[[0, 0], 0], [[0, 0], 0], [[0, 0], 0]], [[[1,0], 0], [[0,0], 1], [[0, 0], 1]], [[[0,0], 1], [[1, 0], 0], [[1,0], 1]], [[[1,0], 1], [[1,0], 1], [[1,0], 0]],
           [[[0, 1], 0], [[0, 1], 0], [[0, 0], 0]], [[[1,1], 0], [[0,1], 1], [[0, 0], 1]], [[[0,1], 1], [[1, 1], 0], [[1,0], 1]], [[[1,1], 1], [[1,1], 1], [[1,0], 0]]]

# case 2-1
G10_test = [[[[0, 0], 0], [[0, 0], 0], [[0, 0], 0]], [[[0,0], 0], [[0,0], 1], [[0, 0], 1]], [[[0,0], 1], [[0, 0], 0], [[0,0], 1]], [[[0,0], 1], [[0,0], 1], [[0,0], 0]],
           [[[1, 0], 0], [[1, 0], 0], [[1, 0], 0]], [[[1,0], 0], [[1,0], 1], [[1, 0], 1]], [[[1,0], 1], [[1, 0], 0], [[1,0], 1]], [[[1,0], 1], [[1,0], 1], [[1,0], 0]],
           [[[0, 1], 0], [[0, 1], 0], [[0, 1], 0]], [[[0,1], 0], [[0,1], 1], [[0, 1], 1]], [[[0,1], 1], [[0, 1], 0], [[0,1], 1]], [[[0,1], 1], [[0,1], 1], [[0,1], 0]],
           [[[1, 1], 0], [[1, 1], 0], [[1, 1], 0]], [[[1,1], 0], [[1,1], 1], [[1, 1], 1]], [[[1,1], 1], [[1, 1], 0], [[1,1], 1]], [[[1,1], 1], [[1,1], 1], [[1,1], 0]]]

# case 2-9
G11_test = [[[[0, 0], 0], [[0, 0], 0], [[0, 0], 0]], [[[0,0], 0], [[0,0], 1], [[0, 0], 1]], [[[0,0], 1], [[0, 0], 0], [[0,0], 1]], [[[0,0], 1], [[0,0], 1], [[0,0], 0]],
            [[[0, 0], 0], [[1, 0], 0], [[1, 0], 0]], [[[0,0], 0], [[1,0], 1], [[1, 0], 1]], [[[0,0], 1], [[1, 0], 0], [[1,0], 1]], [[[0,0], 1], [[1,0], 1], [[1,0], 0]],
            [[[1, 0], 0], [[0, 0], 0], [[1, 0], 0]], [[[1,0], 0], [[0,0], 1], [[1, 0], 1]], [[[1,0], 1], [[0, 0], 0], [[1,0], 1]], [[[1,0], 1], [[0,0], 1], [[1,0], 0]],
            [[[1, 0], 0], [[1, 0], 0], [[0, 0], 0]], [[[1,0], 0], [[1,0], 1], [[0, 0], 1]], [[[1,0], 1], [[1, 0], 0], [[0,0], 1]], [[[1,0], 1], [[1,0], 1], [[0,0], 0]]]

# case 2-12
G12_test = [[[[0, 0], 0], [[0, 0], 0], [[0, 0], 0]], [[[0,1], 0], [[0,0], 1], [[0, 0], 1]], [[[0,0], 1], [[0, 1], 0], [[0,1], 1]], [[[0,1], 1], [[0,1], 1], [[0,1], 0]],
            [[[0, 0], 0], [[1, 0], 0], [[1, 0], 0]], [[[0,0], 0], [[1,0], 1], [[1, 0], 1]], [[[0,0], 1], [[1, 1], 0], [[1,1], 1]], [[[0,1], 1], [[1,1], 1], [[1,1], 0]],
            [[[1, 0], 0], [[0, 0], 0], [[1, 0], 0]], [[[1,1], 0], [[0,0], 1], [[1, 0], 1]], [[[1,0], 1], [[0, 1], 0], [[1,1], 1]], [[[1,1], 1], [[0,1], 1], [[1,1], 0]],
            [[[1, 0], 0], [[1, 0], 0], [[0, 0], 0]], [[[1,1], 0], [[1,0], 1], [[0, 0], 1]], [[[1,0], 1], [[1, 1], 0], [[0,1], 1]], [[[1,1], 1], [[1,1], 1], [[0,1], 0]]]

def translate(pt, t):
    pt_new = cp.deepcopy(pt)
    for i in range(0,3):
        if pt_new[i][1] == 1:
            pt_new[i][0][0] = (pt_new[i][0][0] + t[i][0])%2
            pt_new[i][0][1] = (pt_new[i][0][1] + t[i][1])%2
    return pt_new

def permute(pt, perm):
    pt_old = cp.deepcopy(pt)
    pt_new = cp.deepcopy(pt)
    for i in range(0,3):
        pt_new[i] = pt_old[perm[i] - 1]
    return pt_new

def change_basis(pt, perm, factor):
    pt_new = cp.deepcopy(pt)
    if perm == [1,2,3]:
        pass 
    elif perm == [1,3,2]:
        if pt_new[factor][0] == [0,1]:
            pt_new[factor][0] = [1,1]
        elif pt_new[factor][0] == [1,1]:
            pt_new[factor][0] = [0,1]
    elif perm == [2,1,3]:
        if pt_new[factor][0] == [1,0]:
            pt_new[factor][0] = [0,1]
        elif pt_new[factor][0] == [0,1]:
            pt_new[factor][0] = [1,0]
    elif perm == [2,3,1]:
        if pt_new[factor][0] == [1,1]:
            pt_new[factor][0] = [0,1]
        elif pt_new[factor][0] == [1,0]:
            pt_new[factor][0] = [1,1]
        elif pt_new[factor][0] == [0,1]:
            pt_new[factor][0] = [1,0]
    elif perm == [3,1,2]:
        if pt_new[factor][0] == [1,1]:
            pt_new[factor][0] = [1,0]
        elif pt_new[factor][0] == [1,0]:
            pt_new[factor][0] = [0,1]
        elif pt_new[factor][0] == [0,1]:
            pt_new[factor][0] = [1,1]
    elif perm == [3,2,1]:
        if pt_new[factor][0] == [1,1]:
            pt_new[factor][0] = [1,0]
        elif pt_new[factor][0] == [1,0]:
            pt_new[factor][0] = [1,1]
        elif pt_new[factor][0] == [0,1]:
            pt_new[factor][0] = [0,1]
    return pt_new

def transformation(pt, perm1, perm2, perm3, perm):
    pt_new = cp.deepcopy(pt)
    pt_new = permute(pt_new, perm)
    pt_new = change_basis(pt_new, perm1, 0)
    pt_new = change_basis(pt_new, perm2, 1)
    pt_new = change_basis(pt_new, perm3, 2)
    return pt_new

def group_transformation(G, perm1, perm2, perm3, perm):
    G_new = []
    for g in G:
        g_new = transformation(g, perm1, perm2, perm3, perm)
        G_new.append(g_new)
    return G_new

def group_translate(G, t):
    G_new = []
    for g in G:
        g_new = translate(g, t)
        G_new.append(g_new)
    return G_new

def compare(s, t):
    t1 = list(t)   
    try:
        for elem in s:
            print(elem)
            t1.remove(elem)
    except ValueError:
        return False
    return True

def to_counter(G):
    G_old = cp.deepcopy(G)
    G_new = []
    for g in G_old:
        g_new = []
        for h in g:
            h_new = []
            h_new.append(tuple(h[0]))
            h_new.append(h[1])
            g_new.append(tuple(h_new))
        G_new.append(tuple(g_new))
    G_new = tuple(G_new)
    G_count = collections.Counter(G_new)
    
    return G_count

def check_equality(G1, G2):
    G1_count = to_counter(G1)
    G2_count = to_counter(G2)

    return G1_count == G2_count

def check_equivalence(G1, G2, t):
    permutations = list(itertools.permutations([1,2,3]))
    G2_old = cp.deepcopy(G2)
    for perm,perm1,perm2,perm3 in itertools.product(permutations, permutations, permutations, permutations):
        G2_new = group_transformation(G2_old, list(perm1), list(perm2), list(perm3), list(perm))
        if check_equality(G1, G2_new):
            #return perm,perm1,perm2,perm3
            #print("Translating by " + str(t) + " yields a group equivalent by the permutation of curves " + str(perm) + " and changes of basis " + str(perm1) + ", " + str(perm2) + ", " + str(perm3) )
            print("" + str(t) + ", " + str(perm) + ", " + str(perm1) + ", " + str(perm2) + ", " + str(perm3))
    #return False
    return

# find all translations that yield an equivalent group. We only need to check points of order 4, hence we only need to input points of order 2
# typical translation looks like [[0,0],[0,1],[1,1]]
def find_translations(G):
    pts1 = (0,1)
    pts2 = tuple(itertools.product(pts1, pts1))
    pts = tuple(itertools.product(pts2, pts2, pts2))

    #count = 0
    for t in pts:
        #count = count + 1
        #res = check_equivalence(G, group_translate(G, t), t)
        check_equivalence(G, group_translate(G, t), t)
        #if res is not False:
            #print("Translating by " + str(t) + " yields a group equivalent by the permutation of curves " + str(res[0]) + " and changes of basis " + str(res[1]) + ", " + str(res[2]) + ", " + str(res[3]) )
        #if count%8 == 0:
            #print("!")
    return
def run():
    print("(0-4)")
    find_translations(G5_test)
    print("(1-1)")
    find_translations(G9_test)
    print("(1-5)")
    find_translations(G4_test)
    print("(1-11)")
    find_translations(G0_test)
    print("(2-1)")
    find_translations(G10_test)
    print("(2-9)")
    find_translations(G11_test)
    print("(2-12)")
    find_translations(G12_test)
    print("(3-5)")
    find_translations(G7_test)
    print("(4-1)")
    find_translations(G6_test)
    return
run()
